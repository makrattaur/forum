#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.18052
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Forum")]
	public partial class ForumDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertCategory(Category instance);
    partial void UpdateCategory(Category instance);
    partial void DeleteCategory(Category instance);
    partial void InsertUserGroup(UserGroup instance);
    partial void UpdateUserGroup(UserGroup instance);
    partial void DeleteUserGroup(UserGroup instance);
    partial void InsertForum(Forum instance);
    partial void UpdateForum(Forum instance);
    partial void DeleteForum(Forum instance);
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertThread(Thread instance);
    partial void UpdateThread(Thread instance);
    partial void DeleteThread(Thread instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertPerForumGroupPermissions(PerForumGroupPermissions instance);
    partial void UpdatePerForumGroupPermissions(PerForumGroupPermissions instance);
    partial void DeletePerForumGroupPermissions(PerForumGroupPermissions instance);
    partial void InsertPerForumUserPermissions(PerForumUserPermissions instance);
    partial void UpdatePerForumUserPermissions(PerForumUserPermissions instance);
    partial void DeletePerForumUserPermissions(PerForumUserPermissions instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertUserPermissions(UserPermissions instance);
    partial void UpdateUserPermissions(UserPermissions instance);
    partial void DeleteUserPermissions(UserPermissions instance);
    #endregion
		
		public ForumDataContext() : 
				base(global::Database.Properties.Settings.Default.ForumConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ForumDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Category> Category
		{
			get
			{
				return this.GetTable<Category>();
			}
		}
		
		public System.Data.Linq.Table<UserGroup> UserGroup
		{
			get
			{
				return this.GetTable<UserGroup>();
			}
		}
		
		public System.Data.Linq.Table<Forum> Forum
		{
			get
			{
				return this.GetTable<Forum>();
			}
		}
		
		public System.Data.Linq.Table<Post> Post
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<Thread> Thread
		{
			get
			{
				return this.GetTable<Thread>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<PerForumGroupPermissions> PerForumGroupPermissions
		{
			get
			{
				return this.GetTable<PerForumGroupPermissions>();
			}
		}
		
		public System.Data.Linq.Table<PerForumUserPermissions> PerForumUserPermissions
		{
			get
			{
				return this.GetTable<PerForumUserPermissions>();
			}
		}
		
		public System.Data.Linq.Table<Group> Group
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<UserPermissions> UserPermissions
		{
			get
			{
				return this.GetTable<UserPermissions>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Category")]
	public partial class Category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private short _Order;
		
		private EntitySet<Forum> _Forum;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(short value);
    partial void OnOrderChanged();
    #endregion
		
		public Category()
		{
			this._Forum = new EntitySet<Forum>(new Action<Forum>(this.attach_Forum), new Action<Forum>(this.detach_Forum));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="SmallInt NOT NULL")]
		public short Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Forum", Storage="_Forum", ThisKey="Id", OtherKey="CategoryId")]
		public EntitySet<Forum> Forum
		{
			get
			{
				return this._Forum;
			}
			set
			{
				this._Forum.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Forum(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Category = this;
		}
		
		private void detach_Forum(Forum entity)
		{
			this.SendPropertyChanging();
			entity.Category = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroup")]
	public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserId;
		
		private int _GroupId;
		
		private EntityRef<User> _User;
		
		private EntityRef<Group> _Group;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public UserGroup()
		{
			this._User = default(EntityRef<User>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserGroup.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserGroup.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroup", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.UserGroup.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.UserGroup.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Forum")]
	public partial class Forum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CategoryId;
		
		private string _Name;
		
		private short _Order;
		
		private EntitySet<Thread> _Thread;
		
		private EntitySet<PerForumGroupPermissions> _PerForumGroupPermissions;
		
		private EntitySet<PerForumUserPermissions> _PerForumUserPermissions;
		
		private EntityRef<Category> _Category;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOrderChanging(short value);
    partial void OnOrderChanged();
    #endregion
		
		public Forum()
		{
			this._Thread = new EntitySet<Thread>(new Action<Thread>(this.attach_Thread), new Action<Thread>(this.detach_Thread));
			this._PerForumGroupPermissions = new EntitySet<PerForumGroupPermissions>(new Action<PerForumGroupPermissions>(this.attach_PerForumGroupPermissions), new Action<PerForumGroupPermissions>(this.detach_PerForumGroupPermissions));
			this._PerForumUserPermissions = new EntitySet<PerForumUserPermissions>(new Action<PerForumUserPermissions>(this.attach_PerForumUserPermissions), new Action<PerForumUserPermissions>(this.detach_PerForumUserPermissions));
			this._Category = default(EntityRef<Category>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL")]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._Category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Order]", Storage="_Order", DbType="SmallInt NOT NULL")]
		public short Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				if ((this._Order != value))
				{
					this.OnOrderChanging(value);
					this.SendPropertyChanging();
					this._Order = value;
					this.SendPropertyChanged("Order");
					this.OnOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Thread", Storage="_Thread", ThisKey="Id", OtherKey="ForumId")]
		public EntitySet<Thread> Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				this._Thread.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_PerForumGroupPermissions", Storage="_PerForumGroupPermissions", ThisKey="Id", OtherKey="ForumId")]
		public EntitySet<PerForumGroupPermissions> PerForumGroupPermissions
		{
			get
			{
				return this._PerForumGroupPermissions;
			}
			set
			{
				this._PerForumGroupPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_PerForumUserPermissions", Storage="_PerForumUserPermissions", ThisKey="Id", OtherKey="ForumId")]
		public EntitySet<PerForumUserPermissions> PerForumUserPermissions
		{
			get
			{
				return this._PerForumUserPermissions;
			}
			set
			{
				this._PerForumUserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Category_Forum", Storage="_Category", ThisKey="CategoryId", OtherKey="Id", IsForeignKey=true)]
		public Category Category
		{
			get
			{
				return this._Category.Entity;
			}
			set
			{
				Category previousValue = this._Category.Entity;
				if (((previousValue != value) 
							|| (this._Category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Category.Entity = null;
						previousValue.Forum.Remove(this);
					}
					this._Category.Entity = value;
					if ((value != null))
					{
						value.Forum.Add(this);
						this._CategoryId = value.Id;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("Category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Thread(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_Thread(Thread entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_PerForumGroupPermissions(PerForumGroupPermissions entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_PerForumGroupPermissions(PerForumGroupPermissions entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
		
		private void attach_PerForumUserPermissions(PerForumUserPermissions entity)
		{
			this.SendPropertyChanging();
			entity.Forum = this;
		}
		
		private void detach_PerForumUserPermissions(PerForumUserPermissions entity)
		{
			this.SendPropertyChanging();
			entity.Forum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ThreadId;
		
		private int _AuthorId;
		
		private System.DateTime _PostTime;
		
		private string _Content;
		
		private EntityRef<Thread> _Thread;
		
		private EntityRef<User> _User;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnThreadIdChanging(int value);
    partial void OnThreadIdChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnPostTimeChanging(System.DateTime value);
    partial void OnPostTimeChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    #endregion
		
		public Post()
		{
			this._Thread = default(EntityRef<Thread>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ThreadId", DbType="Int NOT NULL")]
		public int ThreadId
		{
			get
			{
				return this._ThreadId;
			}
			set
			{
				if ((this._ThreadId != value))
				{
					if (this._Thread.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThreadIdChanging(value);
					this.SendPropertyChanging();
					this._ThreadId = value;
					this.SendPropertyChanged("ThreadId");
					this.OnThreadIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PostTime", DbType="DateTime NOT NULL")]
		public System.DateTime PostTime
		{
			get
			{
				return this._PostTime;
			}
			set
			{
				if ((this._PostTime != value))
				{
					this.OnPostTimeChanging(value);
					this.SendPropertyChanging();
					this._PostTime = value;
					this.SendPropertyChanged("PostTime");
					this.OnPostTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Post", Storage="_Thread", ThisKey="ThreadId", OtherKey="Id", IsForeignKey=true)]
		public Thread Thread
		{
			get
			{
				return this._Thread.Entity;
			}
			set
			{
				Thread previousValue = this._Thread.Entity;
				if (((previousValue != value) 
							|| (this._Thread.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Thread.Entity = null;
						previousValue.Post.Remove(this);
					}
					this._Thread.Entity = value;
					if ((value != null))
					{
						value.Post.Add(this);
						this._ThreadId = value.Id;
					}
					else
					{
						this._ThreadId = default(int);
					}
					this.SendPropertyChanged("Thread");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_User", ThisKey="AuthorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Post.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Post.Add(this);
						this._AuthorId = value.Id;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Thread")]
	public partial class Thread : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ForumId;
		
		private string _Title;
		
		private System.DateTime _CreationTime;
		
		private int _AuthorId;
		
		private int _TimesViewed;
		
		private byte _Pinned;
		
		private EntitySet<Post> _Post;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<User> _User;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnCreationTimeChanging(System.DateTime value);
    partial void OnCreationTimeChanged();
    partial void OnAuthorIdChanging(int value);
    partial void OnAuthorIdChanged();
    partial void OnTimesViewedChanging(int value);
    partial void OnTimesViewedChanged();
    partial void OnPinnedChanging(byte value);
    partial void OnPinnedChanged();
    #endregion
		
		public Thread()
		{
			this._Post = new EntitySet<Post>(new Action<Post>(this.attach_Post), new Action<Post>(this.detach_Post));
			this._Forum = default(EntityRef<Forum>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumId", DbType="Int NOT NULL")]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationTime", DbType="DateTime NOT NULL")]
		public System.DateTime CreationTime
		{
			get
			{
				return this._CreationTime;
			}
			set
			{
				if ((this._CreationTime != value))
				{
					this.OnCreationTimeChanging(value);
					this.SendPropertyChanging();
					this._CreationTime = value;
					this.SendPropertyChanged("CreationTime");
					this.OnCreationTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AuthorId", DbType="Int NOT NULL")]
		public int AuthorId
		{
			get
			{
				return this._AuthorId;
			}
			set
			{
				if ((this._AuthorId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAuthorIdChanging(value);
					this.SendPropertyChanging();
					this._AuthorId = value;
					this.SendPropertyChanged("AuthorId");
					this.OnAuthorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimesViewed", DbType="Int NOT NULL")]
		public int TimesViewed
		{
			get
			{
				return this._TimesViewed;
			}
			set
			{
				if ((this._TimesViewed != value))
				{
					this.OnTimesViewedChanging(value);
					this.SendPropertyChanging();
					this._TimesViewed = value;
					this.SendPropertyChanged("TimesViewed");
					this.OnTimesViewedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pinned", DbType="TinyInt NOT NULL")]
		public byte Pinned
		{
			get
			{
				return this._Pinned;
			}
			set
			{
				if ((this._Pinned != value))
				{
					this.OnPinnedChanging(value);
					this.SendPropertyChanging();
					this._Pinned = value;
					this.SendPropertyChanged("Pinned");
					this.OnPinnedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Thread_Post", Storage="_Post", ThisKey="Id", OtherKey="ThreadId")]
		public EntitySet<Post> Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				this._Post.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_Thread", Storage="_Forum", ThisKey="ForumId", OtherKey="Id", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.Thread.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.Thread.Add(this);
						this._ForumId = value.Id;
					}
					else
					{
						this._ForumId = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread", Storage="_User", ThisKey="AuthorId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Thread.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Thread.Add(this);
						this._AuthorId = value.Id;
					}
					else
					{
						this._AuthorId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Post(Post entity)
		{
			this.SendPropertyChanging();
			entity.Thread = this;
		}
		
		private void detach_Post(Post entity)
		{
			this.SendPropertyChanging();
			entity.Thread = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Email;
		
		private string _PasswordHash;
		
		private System.Nullable<System.DateTime> _JoinTime;
		
		private System.Nullable<System.DateTime> _LastVisit;
		
		private string _Avatar;
		
		private EntitySet<UserGroup> _UserGroup;
		
		private EntitySet<Post> _Post;
		
		private EntitySet<Thread> _Thread;
		
		private EntitySet<PerForumUserPermissions> _PerForumUserPermissions;
		
		private EntitySet<UserPermissions> _UserPermissions;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnJoinTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnJoinTimeChanged();
    partial void OnLastVisitChanging(System.Nullable<System.DateTime> value);
    partial void OnLastVisitChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    #endregion
		
		public User()
		{
			this._UserGroup = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroup), new Action<UserGroup>(this.detach_UserGroup));
			this._Post = new EntitySet<Post>(new Action<Post>(this.attach_Post), new Action<Post>(this.detach_Post));
			this._Thread = new EntitySet<Thread>(new Action<Thread>(this.attach_Thread), new Action<Thread>(this.detach_Thread));
			this._PerForumUserPermissions = new EntitySet<PerForumUserPermissions>(new Action<PerForumUserPermissions>(this.attach_PerForumUserPermissions), new Action<PerForumUserPermissions>(this.detach_PerForumUserPermissions));
			this._UserPermissions = new EntitySet<UserPermissions>(new Action<UserPermissions>(this.attach_UserPermissions), new Action<UserPermissions>(this.detach_UserPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_JoinTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> JoinTime
		{
			get
			{
				return this._JoinTime;
			}
			set
			{
				if ((this._JoinTime != value))
				{
					this.OnJoinTimeChanging(value);
					this.SendPropertyChanging();
					this._JoinTime = value;
					this.SendPropertyChanged("JoinTime");
					this.OnJoinTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastVisit", DbType="DateTime")]
		public System.Nullable<System.DateTime> LastVisit
		{
			get
			{
				return this._LastVisit;
			}
			set
			{
				if ((this._LastVisit != value))
				{
					this.OnLastVisitChanging(value);
					this.SendPropertyChanging();
					this._LastVisit = value;
					this.SendPropertyChanged("LastVisit");
					this.OnLastVisitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="NVarChar(50)")]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserGroup", Storage="_UserGroup", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserGroup> UserGroup
		{
			get
			{
				return this._UserGroup;
			}
			set
			{
				this._UserGroup.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Post", Storage="_Post", ThisKey="Id", OtherKey="AuthorId")]
		public EntitySet<Post> Post
		{
			get
			{
				return this._Post;
			}
			set
			{
				this._Post.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Thread", Storage="_Thread", ThisKey="Id", OtherKey="AuthorId")]
		public EntitySet<Thread> Thread
		{
			get
			{
				return this._Thread;
			}
			set
			{
				this._Thread.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PerForumUserPermissions", Storage="_PerForumUserPermissions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<PerForumUserPermissions> PerForumUserPermissions
		{
			get
			{
				return this._PerForumUserPermissions;
			}
			set
			{
				this._PerForumUserPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermissions", Storage="_UserPermissions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<UserPermissions> UserPermissions
		{
			get
			{
				return this._UserPermissions;
			}
			set
			{
				this._UserPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Post(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Post(Post entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Thread(Thread entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Thread(Thread entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_PerForumUserPermissions(PerForumUserPermissions entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_PerForumUserPermissions(PerForumUserPermissions entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserPermissions(UserPermissions entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserPermissions(UserPermissions entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PerForumGroupPermissions")]
	public partial class PerForumGroupPermissions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForumId;
		
		private int _GroupId;
		
		private int _Permissions;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<Group> _Group;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    partial void OnPermissionsChanging(int value);
    partial void OnPermissionsChanged();
    #endregion
		
		public PerForumGroupPermissions()
		{
			this._Forum = default(EntityRef<Forum>);
			this._Group = default(EntityRef<Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permissions", DbType="Int NOT NULL")]
		public int Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				if ((this._Permissions != value))
				{
					this.OnPermissionsChanging(value);
					this.SendPropertyChanging();
					this._Permissions = value;
					this.SendPropertyChanged("Permissions");
					this.OnPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_PerForumGroupPermissions", Storage="_Forum", ThisKey="ForumId", OtherKey="Id", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.PerForumGroupPermissions.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.PerForumGroupPermissions.Add(this);
						this._ForumId = value.Id;
					}
					else
					{
						this._ForumId = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PerForumGroupPermissions", Storage="_Group", ThisKey="GroupId", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.PerForumGroupPermissions.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.PerForumGroupPermissions.Add(this);
						this._GroupId = value.Id;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PerForumUserPermissions")]
	public partial class PerForumUserPermissions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForumId;
		
		private int _UserId;
		
		private int _Permissions;
		
		private EntityRef<Forum> _Forum;
		
		private EntityRef<User> _User;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumIdChanging(int value);
    partial void OnForumIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPermissionsChanging(int value);
    partial void OnPermissionsChanged();
    #endregion
		
		public PerForumUserPermissions()
		{
			this._Forum = default(EntityRef<Forum>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ForumId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ForumId
		{
			get
			{
				return this._ForumId;
			}
			set
			{
				if ((this._ForumId != value))
				{
					if (this._Forum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumIdChanging(value);
					this.SendPropertyChanging();
					this._ForumId = value;
					this.SendPropertyChanged("ForumId");
					this.OnForumIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permissions", DbType="Int NOT NULL")]
		public int Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				if ((this._Permissions != value))
				{
					this.OnPermissionsChanging(value);
					this.SendPropertyChanging();
					this._Permissions = value;
					this.SendPropertyChanged("Permissions");
					this.OnPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Forum_PerForumUserPermissions", Storage="_Forum", ThisKey="ForumId", OtherKey="Id", IsForeignKey=true)]
		public Forum Forum
		{
			get
			{
				return this._Forum.Entity;
			}
			set
			{
				Forum previousValue = this._Forum.Entity;
				if (((previousValue != value) 
							|| (this._Forum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Forum.Entity = null;
						previousValue.PerForumUserPermissions.Remove(this);
					}
					this._Forum.Entity = value;
					if ((value != null))
					{
						value.PerForumUserPermissions.Add(this);
						this._ForumId = value.Id;
					}
					else
					{
						this._ForumId = default(int);
					}
					this.SendPropertyChanged("Forum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_PerForumUserPermissions", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.PerForumUserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.PerForumUserPermissions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _IsSystem;
		
		private int _Permissions;
		
		private EntitySet<UserGroup> _UserGroup;
		
		private EntitySet<PerForumGroupPermissions> _PerForumGroupPermissions;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsSystemChanging(bool value);
    partial void OnIsSystemChanged();
    partial void OnPermissionsChanging(int value);
    partial void OnPermissionsChanged();
    #endregion
		
		public Group()
		{
			this._UserGroup = new EntitySet<UserGroup>(new Action<UserGroup>(this.attach_UserGroup), new Action<UserGroup>(this.detach_UserGroup));
			this._PerForumGroupPermissions = new EntitySet<PerForumGroupPermissions>(new Action<PerForumGroupPermissions>(this.attach_PerForumGroupPermissions), new Action<PerForumGroupPermissions>(this.detach_PerForumGroupPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSystem", DbType="Bit NOT NULL")]
		public bool IsSystem
		{
			get
			{
				return this._IsSystem;
			}
			set
			{
				if ((this._IsSystem != value))
				{
					this.OnIsSystemChanging(value);
					this.SendPropertyChanging();
					this._IsSystem = value;
					this.SendPropertyChanged("IsSystem");
					this.OnIsSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permissions", DbType="Int NOT NULL")]
		public int Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				if ((this._Permissions != value))
				{
					this.OnPermissionsChanging(value);
					this.SendPropertyChanging();
					this._Permissions = value;
					this.SendPropertyChanged("Permissions");
					this.OnPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_UserGroup", Storage="_UserGroup", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<UserGroup> UserGroup
		{
			get
			{
				return this._UserGroup;
			}
			set
			{
				this._UserGroup.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_PerForumGroupPermissions", Storage="_PerForumGroupPermissions", ThisKey="Id", OtherKey="GroupId")]
		public EntitySet<PerForumGroupPermissions> PerForumGroupPermissions
		{
			get
			{
				return this._PerForumGroupPermissions;
			}
			set
			{
				this._PerForumGroupPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_UserGroup(UserGroup entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
		
		private void attach_PerForumGroupPermissions(PerForumGroupPermissions entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_PerForumGroupPermissions(PerForumGroupPermissions entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserPermissions")]
	public partial class UserPermissions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserId;
		
		private int _Permissions;
		
		private EntityRef<User> _User;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnPermissionsChanging(int value);
    partial void OnPermissionsChanged();
    #endregion
		
		public UserPermissions()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Permissions", DbType="Int NOT NULL")]
		public int Permissions
		{
			get
			{
				return this._Permissions;
			}
			set
			{
				if ((this._Permissions != value))
				{
					this.OnPermissionsChanging(value);
					this.SendPropertyChanging();
					this._Permissions = value;
					this.SendPropertyChanged("Permissions");
					this.OnPermissionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_UserPermissions", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserPermissions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserPermissions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
